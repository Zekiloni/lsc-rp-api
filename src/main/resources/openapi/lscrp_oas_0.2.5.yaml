openapi: 3.0.0
info:
  title: County RP API
  description: API
  version: 1.0.0


paths:
  /account:
    post:
      operationId: createAccount
      tags:
        - accountApi
      summary: Create a new account
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountCreate'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
        '400':
          description: Bad Request
        '500':
          description: Internal Server Error
    get:
      operationId: listAccount
      tags:
        - accountApi
      summary: Get a list of all accounts
      security:
        - bearerAuth: [ ]
      parameters:
        - in: query
          name: username
          schema:
            type: string
          required: false
          description: Filter accounts by username
        - in: query
          name: emailAddress
          schema:
            type: string
          required: false
          description: Filter accounts by email address
      x-roles-allowed:
        - user
        - admin
        - super_admin
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Account'
        '500':
          description: Internal Server Error

  /account/{accountId}:
    get:
      operationId: retrieveAccount
      tags:
        - accountApi
      summary: Get an account by ID
      security:
        - bearerAuth: [ ]
      x-roles-allowed:
        - user
        - admin
        - super_admin
      parameters:
        - in: path
          name: accountId
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
        '404':
          description: Not Found
        '500':
          description: Internal Server Error

    patch:
      operationId: patchAccount
      tags:
        - accountApi
      summary: Update an account by ID
      security:
        - bearerAuth: [ ]
      x-roles-allowed:
        - user
        - admin
        - super_admin
      parameters:
        - in: path
          name: accountId
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountUpdate'
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
        '404':
          description: Not Found
        '500':
          description: Internal Server Error

    delete:
      operationId: deleteAccount
      tags:
        - accountApi
      summary: Delete an account by ID
      security:
        - bearerAuth: [ ]
      x-roles-allowed:
        - user
        - admin
        - super_admin
      parameters:
        - in: path
          name: accountId
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '204':
          description: No Content
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /account/{accountId}/logs/login:
    get:
      operationId: listAccountLoginLogs
      tags:
        - accountApi
      summary: Get a list of all account login logs
      parameters:
        - in: path
          name: accountId
          required: true
          schema:
            type: integer
            format: int32
      security:
        - bearerAuth: [ ]
      x-roles-allowed:
        - user
        - admin
        - super_admin
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LoginLogAudit'
        '500':
          description: Internal Server Error
  /character:
    post:
      operationId: createCharacter
      tags:
        - characterApi
      summary: Create a new character
      security:
        - bearerAuth: [ ]
      x-roles-allowed:
        - user
        - admin
        - super_admin
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CharacterCreate'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Character'
    get:
      summary: Get a list of characters
      operationId: listCharacters
      tags:
        - characterApi
      parameters:
        - in: query
          name: name
          schema:
            type: string
          required: false
          description: Filter character by name
        - in: query
          name: accountUsername
          schema:
            type: string
          required: false
          description: Filter characters by account username
      security:
        - bearerAuth: [ ]
      x-roles-allowed:
        - user
        - admin
        - super_admin
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Character'
  /character/{id}:
    get:
      summary: Get a character by ID
      operationId: retrieveCharacter
      tags:
        - characterApi
      security:
        - bearerAuth: [ ]
      x-roles-allowed:
        - user
        - admin
        - super_admin
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Character'
    patch:
      summary: Update a character by ID
      operationId: patchCharacter
      tags:
        - characterApi
      security:
        - bearerAuth: [ ]
      x-roles-allowed:
        - user
        - admin
        - super_admin
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CharacterUpdate'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Character'
    delete:
      summary: Delete a character by ID
      operationId: deleteCharacter
      tags:
        - characterApi
      security:
        - bearerAuth: [ ]
      x-roles-allowed:
        - user
        - super_admin
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '204':
          description: No Content
  /authentication:
    post:
      operationId: authenticate
      tags:
        - authenticationApi
      summary: Authenticate user and generate JWT token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Authentication'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationStatus'
        '401':
          description: Unauthorized - Invalid username or password
    get:
      operationId: validate
      tags:
        - authenticationApi
      summary: Validate token and return Account
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
  /vehicle:
    get:
      summary: Retrieve all vehicles
      operationId: listVehicles
      tags:
        - vehicleApi
      security:
        - bearerAuth: [ ]
      x-roles-allowed:
        - user
        - admin
        - super_admin
      responses:
        '200':
          description: List of vehicles
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Vehicle'
    post:
      summary: Create a new vehicle
      operationId: createVehicle
      tags:
        - vehicleApi
      security:
        - bearerAuth: [ ]
      x-roles-allowed:
        - super_admin
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VehicleCreate'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vehicle'
  /vehicle/{id}:
    get:
      summary: Retrieve a specific vehicle by ID
      operationId: retrieveVehicle
      tags:
        - vehicleApi
      security:
        - bearerAuth: [ ]
      x-roles-allowed:
        - user
        - admin
        - super_admin
      parameters:
        - in: path
          name: id
          required: true
          description: ID of the vehicle to retrieve
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Vehicle details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vehicle'
    patch:
      summary: Update a specific vehicle by ID
      operationId: patchVehicle
      tags:
        - vehicleApi
      security:
        - bearerAuth: [ ]
      x-roles-allowed:
        - user
        - admin
        - super_admin
      parameters:
        - in: path
          name: id
          required: true
          description: ID of the vehicle to update
          schema:
            type: integer
            format: int32
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VehicleUpdate'
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vehicle'
  /ban:
    get:
      operationId: listBans
      tags:
        - banApi
      summary: Retrieve a list of bans
      security:
        - bearerAuth: [ ]
      x-roles-allowed:
        - admin
        - super_admin
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Ban'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /ban/{accountId}:
    get:
      operationId: listAccountBans
      tags:
        - banApi
      summary: Retrieve a list of bans of specific account
      security:
        - bearerAuth: [ ]
      x-roles-allowed:
        - user
        - admin
        - super_admin
      parameters:
        - name: accountId
          in: path
          required: true
          description: The ID of the account to retrieve bans for
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Ban'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /kick/{accountId}:
    get:
      operationId: listAccountKicks
      tags:
        - kickApi
      summary: Retrieve a list of kicks of specific account
      security:
        - bearerAuth: [ ]
      x-roles-allowed:
        - user
        - admin
        - super_admin
      parameters:
        - name: accountId
          in: path
          required: true
          description: The ID of the account to retrieve kicks for
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Kick'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /warn/{accountId}:
    get:
      operationId: listAccountWarns
      tags:
        - warnApi
      summary: Retrieve a list of warns of specific account
      security:
        - bearerAuth: [ ]
      x-roles-allowed:
        - user
        - admin
        - super_admin
      parameters:
        - name: accountId
          in: path
          required: true
          description: The ID of the account to retrieve warns for
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Warn'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /property:
    get:
      operationId: listProperties
      tags:
        - propertyApi
      summary: Retrieve list of properties
      security:
        - bearerAuth: [ ]
      x-roles-allowed:
        - user
        - admin
        - super_admin
      parameters:
        - name: type
          in: query
          description: Filter by property type
          schema:
            $ref: '#/components/schemas/PropertyType'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Property'
    post:
      operationId: createProperty
      tags:
        - propertyApi
      summary: Create a new property
      security:
        - bearerAuth: [ ]
      x-roles-allowed:
        - super_admin
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Property'
      responses:
        '201':
          description: Property created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Property'
  /property/{id}:
    get:
      operationId: retrieveProperty
      tags:
        - propertyApi
      summary: Retrieve a property by ID
      security:
        - bearerAuth: [ ]
      x-roles-allowed:
        - user
        - admin
        - super_admin
      parameters:
        - name: id
          in: path
          description: ID of the property to retrieve
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Property'
    patch:
      operationId: patchProperty
      tags:
        - propertyApi
      summary: Update a property by ID
      security:
        - bearerAuth: [ ]
      x-roles-allowed:
        - admin
        - super_admin
      parameters:
        - name: id
          in: path
          description: ID of the property to update
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PropertyUpdate'
      responses:
        '200':
          description: Property updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Property'
  /faction/{characterId}/kick:
    post:
      operationId: kickFactionMember
      tags:
        - factionApi
      summary: Kick a faction member by character ID
      security:
        - bearerAuth: [ ]
      x-roles-allowed:
        - admin
        - super_admin
      parameters:
        - name: characterId
          in: path
          description: ID of the character to kick
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /faction/{characterId}/rank:
    post:
      operationId: patchFactionMemberRank
      tags:
        - factionApi
      summary: Update a faction member rank by character ID
      security:
        - bearerAuth: [ ]
      x-roles-allowed:
        - admin
        - super_admin
      parameters:
        - name: characterId
          in: path
          description: ID of the character to update rank
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MemberRankUpdate'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FactionMember'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /faction/{factionId}:
    get:
      operationId: retrieveFaction
      tags:
        - factionApi
      summary: Retrieve a faction by ID
      security:
        - bearerAuth: [ ]
      x-roles-allowed:
        - user
        - admin
        - super_admin
      parameters:
        - name: factionId
          in: path
          description: ID of the faction to retrieve
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Faction'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /faction/{id}/members:
    get:
      operationId: listFactionMembers
      tags:
        - factionApi
      summary: List a faction members by faction ID
      security:
        - bearerAuth: [ ]
      x-roles-allowed:
        - user
        - admin
        - super_admin
      parameters:
        - name: id
          in: path
          description: ID of the faction to list members
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FactionMember'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /quiz:
    get:
      operationId: retrieveQuiz
      tags:
        - quizApi
      summary: Generate a random quiz
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Question'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      operationId: submitQuiz
      tags:
        - quizApi
      summary: Submit a quiz
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QuizSubmit'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuizResult'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /online-players:
    get:
      operationId: getOnlinePlayers
      tags:
        - onlinePlayersApi
      summary: Get right now online characters (in game)
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        '500':
          description: Internal Server Error
  /stats/online-players:
    get:
      operationId: listOnlinePlayersStat
      tags:
        - onlinePlayerStatApi
      summary: Get a list of all online players count audit in date range
      parameters:
        - in: query
          name: startingAt
          schema:
            type: string
            format: date-time
          required: false
          description: Starting at offset
        - in: query
          name: endingAt
          schema:
            type: string
            format: date-time
          required: false
          description: Ending at offset
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OnlinePlayerStat'
        '500':
          description: Internal Server Error
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    OnlinePlayer:
      type: object
      properties:
        accountUsername:
          type: string
        characterName:
          type: string
        characterSkin:
          type: integer
        factionName:
          type: string
        administrator:
          type: integer
      required:
        - accountUsername
        - characterName
        - factionName
        - administrator
    OnlinePlayerStat:
      type: object
      properties:
        id:
          type: integer
        playerCount:
          type: integer
        createdAt:
          type: string
          format: date-time
      required:
        - id
        - playerCount
        - createdAt
    Question:
      type: object
      properties:
        id:
          type: string
        question:
          type: string
        answers:
          type: array
          items:
            $ref: '#/components/schemas/QuestionAnswer'
      required:
        - id
        - question
        - answers
    QuestionAnswer:
      type: object
      properties:
        id:
          type: string
        answer:
          type: string
      required:
        - id
        - answer
    QuizSubmit:
      type: object
      properties:
        answers:
          type: array
          items:
            $ref: '#/components/schemas/QuestionAnswerSubmit'
      required:
        - answers
    QuestionAnswerSubmit:
      type: object
      properties:
        questionId:
          type: string
        answerId:
          type: string
      required:
        - questionId
        - answerId
    QuizResult:
      type: object
      properties:
        failed:
          type: boolean
        maxFailedAnswers:
          type: integer
        wrongAnswers:
          type: array
          items:
            type: string
      required:
        - failed
        - maxFailedAnswers
        - wrongAnswers
    Account:
      type: object
      properties:
        id:
          type: integer
          format: int32
        username:
          type: string
        email:
          type: string
        characters:
          type: array
          items:
            $ref: '#/components/schemas/Character'
        lastLoginAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        admin:
          type: integer
        referralCode:
          type: string
        createdAt:
          type: string
          format: date-time
      required:
        - id
        - username
        - email
        - admin
        - characters
        - createdAt
    AccountCreate:
      type: object
      properties:
        username:
          type: string
        email:
          type: string
        password:
          type: string
        referralCode:
          type: string
      required:
        - username
        - email
        - password

    AccountUpdate:
      type: object
      properties:
        username:
          type: string
        email:
          type: string
        password:
          type: string
        referralCode:
          type: string

    Character:
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
        birthday:
          type: string
          format: date
        accountId:
          type: integer
          format: int32
        accountUsername:
          type: string
        gender:
          $ref: '#/components/schemas/CharacterGender'
        health:
          type: integer
          minimum: 0
          maximum: 100
        armour:
          type: integer
          minimum: 0
          maximum: 100
        skin:
          type: integer
        money:
          type: integer
        paycheck:
          type: integer
        bank:
          type: integer
        savings:
          type: integer
        hours:
          type: integer
        minutes:
          type: integer
        level:
          type: integer
        positionX:
          type: number
        positionY:
          type: number
        positionZ:
          type: number
        angle:
          type: number
        virtualWorld:
          type: integer
        interior:
          type: integer
        vehicles:
          type: array
          items:
            $ref: '#/components/schemas/Vehicle'
        properties:
          type: array
          items:
            $ref: '#/components/schemas/Property'
        factionId:
          type: integer
        rankId:
          type: integer
        isLeader:
          type: boolean
        job:
          type: integer
        state:
          type: integer
        maskId:
          type: string
        respawnTime:
          type: integer
        drugAddiction:
          type: integer
        walkingStyle:
          type: integer
          description: The walking style of the character
        fightingStyle:
          type: integer
          description: The fighting style of the character
        createdAt:
          type: string
          format: date-time
      required:
        - id
        - accountId
        - accountUsername
        - name
        - birthday
        - gender
        - health
        - armour
        - skin
        - money
        - paycheck
        - bank
        - savings
        - hours
        - minutes
        - level
        - positionX
        - positionY
        - positionZ
        - angle
        - virtualWorld
        - interior
        - isLeader
        - job
        - state
        - respawnTime
        - drugAddiction
        - walkingStyle
        - fightingStyle
        - createdAt
        - factionId

    CharacterCreate:
      type: object
      properties:
        accountId:
          type: integer
          format: int32
        name:
          type: string
        birthday:
          type: string
          format: date
        gender:
          $ref: '#/components/schemas/CharacterGender'
        skin:
          type: integer
      required:
        - accountId
        - name
        - birthday
        - gender

    CharacterGender:
      type: string
      enum: [ MALE, FEMALE ]

    CharacterUpdate:
      type: object
      properties:
        name:
          type: string
        health:
          type: integer
          minimum: 0
          maximum: 100
        armour:
          type: integer
          minimum: 0
          maximum: 100

    Authentication:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
      required:
        - username
        - password

    AuthenticationStatus:
      type: object
      properties:
        token:
          type: string
        account:
          $ref: '#/components/schemas/Account'
      required:
        - token
        - account

    Vehicle:
      type: object
      properties:
        id:
          type: integer
          format: int32
        model:
          type: integer
          description: Model ID of the vehicle
        owner:
          $ref: '#/components/schemas/Character'
        price:
          type: integer
          format: int32
        health:
          type: number
        numberplate:
          type: string
        positionX:
          type: number
          format: float
        positionY:
          type: number
          format: float
        positionZ:
          type: number
          format: float
        rotation:
          type: number
          format: float
        parkPositionX:
          type: number
          format: float
        parkPositionY:
          type: number
          format: float
        parkPositionZ:
          type: number
          format: float
        parkRotation:
          type: number
          format: float
        primaryColor:
          type: integer
          description: Primary color code
        secondaryColor:
          type: integer
          description: Secondary color code
        createdAt:
          type: string
          format: date-time
      required:
        - id
        - model
        - price
        - owner
        - positionX
        - positionY
        - positionZ
        - rotation
        - primaryColor
        - secondaryColor
        - parkPositionX
        - parkPositionY
        - parkPositionZ
        - parkRotation
    VehicleCreate:
      type: object
      properties:
        model:
          type: integer
          description: Model ID of the vehicle
        owner:
          $ref: '#/components/schemas/Character'
        positionX:
          type: number
          format: float
        positionY:
          type: number
          format: float
        positionZ:
          type: number
          format: float
        rotation:
          type: number
          format: float
        parkPositionX:
          type: number
          format: float
        parkPositionY:
          type: number
          format: float
        parkPositionZ:
          type: number
          format: float
        parkRotation:
          type: number
          format: float
        primaryColor:
          type: integer
          description: Primary color code
        secondaryColor:
          type: integer
          description: Secondary color code
      required:
        - model
    VehicleUpdate:
      type: object
      properties:
        positionX:
          type: number
          format: float
        positionY:
          type: number
          format: float
        positionZ:
          type: number
          format: float
        rotation:
          type: number
          format: float
        parkPositionX:
          type: number
          format: float
        parkPositionY:
          type: number
          format: float
        parkPositionZ:
          type: number
          format: float
        parkRotation:
          type: number
          format: float
        primaryColor:
          type: integer
          description: Primary color code
        secondaryColor:
          type: integer
          description: Secondary color code
    Property:
      type: object
      properties:
        id:
          type: integer
          format: int32
        type:
          type: string
          enum: [ HOUSE, BUSINESS, APARTMENT, WAREHOUSE ]
        name:
          type: string
          maxLength: 128
        owner:
          $ref: '#/components/schemas/Character'
        price:
          type: integer
        address:
          type: string
          maxLength: 64
        positionX:
          type: number
          format: float
        positionY:
          type: number
          format: float
        positionZ:
          type: number
          format: float
        exteriorVirtualWorld:
          type: integer
        exterior:
          type: integer
        interiorPositionX:
          type: number
          format: float
        interiorPositionY:
          type: number
          format: float
        interiorPositionZ:
          type: number
          format: float
        interior:
          type: integer
        isLocked:
          type: boolean
      required:
        - name
        - price
        - positionX
        - positionY
        - positionZ
        - exteriorVirtualWorld
        - exterior
        - interiorPositionX
        - interiorPositionY
        - interiorPositionZ
        - interior
    PropertyUpdate:
      type: object
      properties:
        name:
          type: string
          maxLength: 128
        price:
          type: integer
        address:
          type: string
          maxLength: 64
        positionX:
          type: number
          format: float
        positionY:
          type: number
          format: float
        positionZ:
          type: number
          format: float
        exteriorVirtualWorld:
          type: integer
        exterior:
          type: integer
        interiorPositionX:
          type: number
          format: float
        interiorPositionY:
          type: number
          format: float
        interiorPositionZ:
          type: number
          format: float
        interior:
          type: integer
        isLocked:
          type: boolean
    PropertyType:
      type: string
      enum: [ HOUSE, BUSINESS, APARTMENT, WAREHOUSE ]
    Kick:
      type: object
      properties:
        id:
          type: integer
          format: int32
        account:
          type: string
        reason:
          type: string
        adminAccount:
          type: string
        createdAt:
          type: string
          format: date-time
      required:
        - account
        - reason
        - createdAt
    Warn:
      type: object
      properties:
        id:
          type: integer
          format: int32
        account:
          type: string
        reason:
          type: string
        adminAccount:
          type: string
        createdAt:
          type: string
          format: date-time
      required:
        - account
        - reason
        - createdAt
    Ban:
      type: object
      properties:
        id:
          type: integer
          format: int32
        account:
          type: string
        reason:
          type: string
        adminAccount:
          type: string
        ipAddress:
          type: string
        expiringAt:
          type: string
          format: date
        isExpired:
          type: boolean
        createdAt:
          type: string
          format: date-time
      required:
        - id
        - account
        - ipAddress
        - expiringAt
        - reason
        - createdAt
        - isExpired
    BanCreate:
      type: object
      properties:
        id:
          type: integer
          format: int32
        account:
          $ref: '#/components/schemas/Account'
        reason:
          type: string
        adminAccount:
          $ref: '#/components/schemas/Account'
        ipAddress:
          type: string
        expiringAt:
          type: string
          format: date
      required:
        - account
        - reason
    Faction:
      type: object
      properties:
        id:
          type: integer
          format: int32
          description: The unique identifier of the faction.
        name:
          type: string
          maxLength: 64
          description: The name of the faction.
        shortName:
          type: string
          maxLength: 64
          description: The short name of the faction.
        type:
          type: integer
          format: int32
          description: The type of the faction.
        positionX:
          type: number
          format: float
          description: The X coordinate of the faction's position.
        positionY:
          type: number
          format: float
          description: The Y coordinate of the faction's position.
        positionZ:
          type: number
          format: float
          description: The Z coordinate of the faction's position.
        virtualWorld:
          type: integer
          format: int32
          description: The virtual world identifier of the faction.
        interior:
          type: integer
          format: int32
          description: The interior identifier of the faction.
        budget:
          type: integer
          format: int32
          description: The budget of the faction.
      required:
        - id
        - name
        - shortName
        - type
        - positionX
        - positionY
        - positionZ
        - virtualWorld
        - interior
        - budget
    FactionMember:
      type: object
      properties:
        accountUsername:
          type: string
        characterId:
          type: integer
          format: int32
        characterName:
          type: string
        characterSkin:
          type: integer
          format: int32
        rankName:
          type: string
        isLeader:
          type: boolean
        isInGame:
          type: boolean
        averageActivity:
          type: number
          format: double
      required:
        - accountUsername
        - characterId
        - characterName
        - characterSkin
        - isLeader
        - isInGame
    LoginLogAudit:
      type: object
      properties:
        accountId:
          type: integer
          format: int32
        ipAddress:
          type: string
        success:
          type: boolean
        createdAt:
          type: string
          format: date-time
      required:
        - ipAddress
        - createdAt
        - success
    MemberRankUpdate:
      type: object
      properties:
        rankName:
          type: string
      required:
        - rankName
    MessageResponse:
      type: object
      description: Generic message response
      properties:
        message:
          type: string
      required:
        - message
    ApiError:
      type: object
      description: |
        Used when an API throws an Error, typically with a HTTP error response-code (3xx, 4xx, 5xx)
      required:
        - code
        - reason
      properties:
        code:
          type: string
          description: Application relevant detail, defined in the API or a common list.
        reason:
          type: string
          description: Explanation of the reason for the error which can be shown to a client user.
        message:
          type: string
          description: More details and corrective actions related to the error which can be shown to a client user.
        status:
          type: string
          description: HTTP Error code extension
        referenceError:
          type: string
          format: uri
          description: URI of documentation describing the error.
        '@type':
          type: string
          description: When sub-classing, this defines the sub-class entity name.
  responses:
    InternalServerError:
      description: Internal Server Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiError'
    UnauthorizedError:
      description: Internal Server Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiError'
    BadRequestError:
      description: Internal Server Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiError'
    NotFoundError:
      description: Not Found Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiError'
security:
  - bearerAuth: [ ]