openapi: 3.0.0
info:
  title: County RP API
  description: API
  version: 1.0.0


paths:
  /account:
    post:
      operationId: createAccount
      tags:
        - accountApi
      summary: Create a new account
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountCreate'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
        '400':
          description: Bad Request
        '500':
          description: Internal Server Error

    get:
      operationId: listAccount
      tags:
        - accountApi
      summary: Get a list of all accounts
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Account'
        '500':
          description: Internal Server Error

  /account/{accountId}:
    get:
      operationId: retrieveAccount
      tags:
        - accountApi
      summary: Get an account by ID
      parameters:
        - in: path
          name: accountId
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
        '404':
          description: Not Found
        '500':
          description: Internal Server Error

    patch:
      operationId: patchAccount
      tags:
        - accountApi
      summary: Update an account by ID
      parameters:
        - in: path
          name: accountId
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountUpdate'
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
        '404':
          description: Not Found
        '500':
          description: Internal Server Error

    delete:
      operationId: deleteAccount
      tags:
        - accountApi
      summary: Delete an account by ID
      parameters:
        - in: path
          name: accountId
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: No Content
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /characters:
    post:
      summary: Create a new character
      operationId: createCharacter
      tags:
        - characterApi
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CharacterCreate'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Character'
    get:
      summary: Get a list of characters
      operationId: listCharacters
      tags:
        - characterApi
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Character'
  /characters/{id}:
    get:
      summary: Get a character by ID
      operationId: retrieveCharacter
      tags:
        - characterApi
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Character'
    patch:
      summary: Update a character by ID
      operationId: patchCharacter
      tags:
        - characterApi
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CharacterUpdate'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Character'
    delete:
      summary: Delete a character by ID
      operationId: deleteCharacter
      tags:
        - characterApi
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: No Content
  /authentication:
    post:
      operationId: authenticate
      tags:
        - authenticationApi
      summary: Authenticate user and generate JWT token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Authentication'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationStatus'
        '401':
          description: Unauthorized - Invalid username or password
    get:
      operationId: validate
      tags:
        - authenticationApi
      summary: Validate token and return Account
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
  schemas:
    Account:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        email:
          type: string
        characters:
          type: array
          items:
            $ref: '#/components/schemas/Character'
        lastLoginAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        admin:
          type: integer
        referralCode:
          type: string
        createdAt:
          type: string
          format: date-time
      required:
        - id
        - username
        - email
        - admin
        - createdAt

    AccountCreate:
      type: object
      properties:
        username:
          type: string
        email:
          type: string
        password:
          type: string
        referralCode:
          type: string
      required:
        - username
        - email
        - password

    AccountUpdate:
      type: object
      properties:
        username:
          type: string
        email:
          type: string
        password:
          type: string
        referralCode:
          type: string

    Character:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        birthday:
          type: string
          format: date
        gender:
          type: string
          enum: [ '0', '1' ]
        health:
          type: integer
          minimum: 0
          maximum: 100
        armour:
          type: integer
          minimum: 0
          maximum: 100
        skin:
          type: integer
        money:
          type: integer
        paycheck:
          type: integer
        bank:
          type: integer
        savings:
          type: integer
        hours:
          type: integer
        minutes:
          type: integer
        level:
          type: integer
        positionX:
          type: number
        positionY:
          type: number
        positionZ:
          type: number
        angle:
          type: number
        virtualWorld:
          type: integer
        interior:
          type: integer
        factionId:
          type: integer
        rankId:
          type: integer
        isLeader:
          type: boolean
        job:
          type: integer
        state:
          type: integer
        respawnTime:
          type: integer
        drugAddiction:
          type: integer
        walkingStyle:
          type: integer
          description: The walking style of the character
        fightingStyle:
          type: integer
          description: The fighting style of the character
      required:
        - accountId
        - name
        - birthday
        - gender
        - health
        - armour
        - skin
        - money
        - paycheck
        - bank
        - savings
        - hours
        - minutes
        - level
        - positionX
        - positionY
        - positionZ
        - angle
        - virtualWorld
        - interior
        - isLeader
        - job
        - state
        - respawnTime
        - drugAddiction
        - walkingStyle
        - fightingStyle

    CharacterCreate:
      type: object
      properties:
        accountId:
          type: integer
          format: int64
        name:
          type: string
        birthday:
          type: string
          format: date
        gender:
          type: string
          enum: [ '0', '1' ]
      required:
        - accountId
        - name
        - birthday
        - gender

    CharacterUpdate:
      type: object
      properties:
        name:
          type: string
        health:
          type: integer
          minimum: 0
          maximum: 100
        armour:
          type: integer
          minimum: 0
          maximum: 100

    Authentication:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
      required:
        - username
        - password

    AuthenticationStatus:
      type: object
      properties:
        token:
          type: string
        account:
          $ref: '#/components/schemas/Account'
      required:
        - token
        - account

    ApiError:
      description: |
        Used when an API throws an Error, typically with a HTTP error response-code (3xx, 4xx, 5xx)
      type: object
      required:
        - code
        - reason
      properties:
        code:
          type: string
          description: Application relevant detail, defined in the API or a common list.
        reason:
          type: string
          description: Explanation of the reason for the error which can be shown to a client user.
        message:
          type: string
          description: More details and corrective actions related to the error which can be shown to a client user.
        status:
          type: string
          description: HTTP Error code extension
        referenceError:
          type: string
          format: uri
          description: URI of documentation describing the error.
        '@type':
          type: string
          description: When sub-classing, this defines the sub-class entity name.